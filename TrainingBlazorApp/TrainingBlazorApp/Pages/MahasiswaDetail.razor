@inject IJSRuntime jsRuntime
@using System.IO
@inject IToastService toastService
@inject MahasiswaService service

<div class="modal" tabindex="-1" role="dialog" id="taskModal">
    <div class="modal-dialog modal-lg" role="Mahasiswa">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@CustomHeader</h5>


                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">×</span>
                </button>
            </div>
            <div class="modal-body">
                <EditForm Model="@TaskObject" OnValidSubmit="@HandleValidSubmit">
                    <DataAnnotationsValidator />
                  
                    <div class="form-group">
                        <label for="nim">NIM Mahasiswa</label>
                        <InputText id="nim" class="form-control" @bind-Value="@TaskObject.NIM" />
                        <ValidationMessage For="@(() => TaskObject.NIM)" />
                    </div>  
                    
                    <div class="form-group">
                        <label for="nama">Nama Mahasiswa</label>
                        <InputText id="nama" class="form-control" @bind-Value="@TaskObject.Nama" />
                        <ValidationMessage For="@(() => TaskObject.Nama)" />
                    </div>
                    <div class="form-group">
                        <label for="kelamin">Kelamin</label>
                        <select @bind="@TaskObject.Kelamin" id="Kelamin">
                           
                            @foreach (string name in Enum.GetNames(typeof(JenisKelamin)))
                            {
                             <option value="@name">@name</option>
                            }
                        </select>
                        <ValidationMessage For="@(() => TaskObject.Kelamin)" />
                    </div>
                    <div class="form-group">
                        <label for="tanggal">Tanggal Lahir</label>
                        <InputDate id="tanggal" class="form-control" @bind-Value="@TaskObject.TanggalLahir" />
                        <ValidationMessage For="@(() => TaskObject.TanggalLahir)" />
                    </div>
                    <div class="form-group">
                        <label for="IPK">IPK</label>
                        <InputNumber id="ket" class="form-control" @bind-Value="@TaskObject.IPK" />
                        <ValidationMessage For="@(() => TaskObject.IPK)" />
                    </div>
                  

                    <button type="submit" class="btn btn-primary">Simpan</button>
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                </EditForm>

            </div>
        </div>
    </div>
</div>

@code {

    public string FileUrl { get; set; }
    [Parameter]
    public RenderFragment CustomHeader { get; set; }
    [Parameter]
    public Mahasiswa TaskObject { get; set; }
    [Parameter]
    public Action DataChanged { get; set; }

    protected override async Task OnInitializedAsync()
    {

    }
    private async void HandleValidSubmit()
    {

        var item = service.GetByNIM(TaskObject.NIM);
        
        if (item == null)
        {

            service.Add(TaskObject);

        }
        else
        {
            service.Update(TaskObject);
        }

        await CloseTaskModal();
        DataChanged?.Invoke();
    }


    private async Task CloseTaskModal()
    {
        await jsRuntime.InvokeAsync<object>("CloseModal", "taskModal");
    }


}