@page "/mahasiswa"

@inject MahasiswaService Svc
@inject IToastService toastService
@inject IJSRuntime jsRuntime

<h3>DataMahasiswa</h3>

<div class="grid">
    <QuickGrid Items="@FilteredMahasiswa" Virtualize="true" Pagination="@pagination">
        <PropertyColumn Property="@(c => c.NIM)" Sortable="true">           
        </PropertyColumn>
        <PropertyColumn Property="@(c => c.Nama)" Sortable="true" Align="Align.Right" >
            <ColumnOptions>
                <div class="search-box">
                    <input type="search" autofocus @bind="nameFilter" @bind:event="oninput" placeholder="Nama..." />
                </div>
            </ColumnOptions>
        </PropertyColumn>
        <PropertyColumn Property="@(c => c.TanggalLahir)" Sortable="true" Align="Align.Right" >
            <ColumnOptions>
                <p>Min: <input type="date" @bind="TglStart" @bind:event="oninput" /> <span class="inline-block w-10">@TglStart</span></p>
                <p>Max: <input type="date" @bind="TglEnd" @bind:event="oninput" /> <span class="inline-block w-10">@TglEnd</span></p>
            </ColumnOptions>
        </PropertyColumn>
        <PropertyColumn Property="@(c => c.IPK)" Sortable="true" Align="Align.Right" >
            <ColumnOptions>
                <p>Min: <input type="range" @bind="minIPK" @bind:event="oninput" min="0" max="4" /> <span class="inline-block w-10">@minIPK</span></p>
                <p>Max: <input type="range" @bind="maxIPK" @bind:event="oninput" min="0" max="4" /> <span class="inline-block w-10">@maxIPK</span></p>
            </ColumnOptions>
        </PropertyColumn>
        <PropertyColumn Property="@(c => c.Kelamin)" Sortable="true" Align="Align.Right">
           
        </PropertyColumn>
    </QuickGrid>
</div>
<Paginator Value="@pagination" />

<table class="table table-bordered table-hover">
    <thead>
        <tr>
            <th scope="col">NIM</th>
            <th scope="col">Nama</th>
            <th scope="col">Tanggal Lahir</th>
            <th scope="col">IPK</th>
            <th scope="col">Jenis Kelamin</th>
            <th scope="col">Action</th>
        </tr>
    </thead>
    <tbody>
        @if (Data != null)
        {
            foreach (var item in Data)
            {
                <tr>
                    <th>@item.NIM</th>
                    <td>@item.Nama</td>
                    <td>@item.TanggalLahir.ToString("dd/MMM/yyyy")</td>
                    <td>@item.IPK</td>
                    <td>@item.Kelamin</td>
                    <td>
                        <button @onclick="()=>Hapus(item)" class="btn btn-danger">Hapus</button>
                        <button @onclick="()=>Update(item)" class="btn btn-info">Update</button>
                        
                        </td>
                </tr>
            }
        }

    </tbody>
</table>
<input type="button" data-toggle="modal" data-target="#taskModal" class="btn btn-primary" value="Tambah Data" @onclick="(() => InitializeitemObject())" />

<MahasiswaDetail @ref="detail" TaskObject=@itemObject DataChanged="@DataChanged">
    <CustomHeader>Data Mahasiswa</CustomHeader>
</MahasiswaDetail>

@code {
    Mahasiswa itemObject = new();
    MahasiswaDetail detail;
    List<Mahasiswa> Data { set; get; } = new();
    private async Task ShowModal()
    {
        await jsRuntime.InvokeAsync<object>("ShowModal", "taskModal");
    }
    void InitializeitemObject()
    {
        itemObject = new();
        itemObject.Nama = "-";
        //ShowModal();
    }
    private async void DataChanged()
    {
        Load();
        StateHasChanged();
    }
    protected override void OnInitialized()
    {
        Load();
    }
    void Hapus(Mahasiswa item)
    {
        var res = Svc.Delete(item.NIM);
        if (res)
        {
            toastService.ShowSuccess("berhasil di hapus");
            Load();
        }
        else
        {
            toastService.ShowError("gagal di hapus");

        }
    } 

    async Task Update(Mahasiswa item)
    {
        itemObject = item;
        await ShowModal();
    }

    async void Load()
    {
        Data = Svc.GetAllData();
        itemsQueryable = Svc.GetAllDataQueryable();
    }

    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };
    IQueryable<Mahasiswa>? itemsQueryable;
    string nameFilter;
    int minIPK;
    int maxIPK = 4;
    DateTime TglStart = DateTime.MinValue;
    DateTime TglEnd = DateTime.Now.AddDays(1);

    IQueryable<Mahasiswa> FilteredMahasiswa
    {
        get
        {
            var result = itemsQueryable?.Where(c => c.IPK <= maxIPK);
            if(TglStart!=null && TglEnd != null)
            {
                result = itemsQueryable?.Where(c => c.TanggalLahir >= TglStart && c.TanggalLahir <= TglEnd);
            }
           
            /*
            if (!string.IsNullOrEmpty(nameFilter))
            {
                result = result.Where(c => c.Nama.Contains(nameFilter, StringComparison.CurrentCultureIgnoreCase));
            }
            */
            if (minIPK > 0)
            {
                result = result.Where(c => c.IPK >= minIPK);
            }

            return result;
        }
    }

  
}
